{
  "Description" : "Sets up a Lambda to deliver random items to an S3 Bucket. Use in tandem with CloudTrail -> Amazon ES for testing. ***Note*** This template deploys resources that will result in charges to your AWS account",
  "Metadata": {
    "Copyright" : { "Value": "Amazon Web Services 2018. All rights reserved."}
  },
  "Parameters" : {
    "StackPrefix": {
      "Type": "String",
      "Description": "A short string (6 characters) to prefix all names for stack elements."
    }
  },
  "Resources" : {
    "S3Bucket": {
      "Type" : "AWS::S3::Bucket",
      "DeletionPolicy": "Delete"
    },
    "BucketCleanupLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {"Service": ["lambda.amazonaws.com"]},
            "Action": ["sts:AssumeRole"]
          }]
        },
        "Path": "/",
        "Policies": [{
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [ "s3:List*", "s3:DeleteObject" ],
                "Resource": [{ "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref": "S3Bucket"}]]},
                             { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref": "S3Bucket" }, "/*"]]}]
              },
              {
                "Effect": "Allow",
                "Action": ["s3:List*", "s3:DeleteObject"],
                "Resource": [{ "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref": "S3Bucket"}]]},
                             { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref": "S3Bucket" }, "/*"]]}]
              },
              {
                "Effect": "Allow",
                "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents", "logs:DeleteLog*"],
                "Resource": "*"
              }]
          }
        }]
      }
    },
    "BucketCleanupLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile":{
            "Fn::Join":[ "\n",
            [  
              "import json",
              "import boto3",
              "import cfnresponse",
              "from botocore.vendored import requests",
              "def delete_handler(event, context):",
              "  try:",
              "    print(event)",
              "    bucket = event['ResourceProperties']['BucketName']",
              "    if event['RequestType'] == 'Delete':",
              "      s3 = boto3.resource('s3')",
              "      bucket = s3.Bucket(bucket)",
              "      for obj in bucket.objects.filter():",
              "        print(\"Deleting ->\",obj.key)",
              "        s3.Object(bucket.name, obj.key).delete()",
              "    cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['LogicalResourceId'])",
              "  except Exception as e:",
              "    print(e)",
              "    cfnresponse.send(event, context, cfnresponse.FAILED, {}, event['LogicalResourceId'])"
            ]]}
        },
        "Description": "Cleanup handler to empty a bucket (not done normally with bucket deletes)",
        "FunctionName": { "Fn::Join" : [ "", [ { "Ref": "StackPrefix" }, "-DeleteBucketObjects" ] ] },
        "Handler": "index.delete_handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt":["BucketCleanupLambdaExecutionRole","Arn"]},
        "Runtime": "python2.7",
        "Timeout": 300
      }
    },
    "DeleteBucketObjects": {
        "Type": "Custom::DeleteBucketObjects",
        "Properties": {
            "ServiceToken": { "Fn::GetAtt" : [ "BucketCleanupLambda", "Arn" ] },
            "BucketName": { "Ref" : "S3Bucket" }
        }
    },


    
    "TestLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": { "Fn::Join": [ "", [ { "Ref": "StackPrefix" }, "-TestLambdaRole" ] ] },
        "Path": "/",
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": { "Service" : "lambda.amazonaws.com" },
            "Action": "sts:AssumeRole"
          } ] 
        },
        "Policies": [ 
          {
            "PolicyName": { "Fn::Join": [ "", [ { "Ref": "StackPrefix"}, "-TestLambdaPolicy"]]},
            "PolicyDocument": {
              "Version":"2012-10-17",
              "Statement":[ 
                {
                  "Effect": "Allow",
                  "Action": [
                      "s3:*"
                  ],
                  "Resource": [ 
                    { "Fn::GetAtt" : [ "S3Bucket", "Arn" ] },
                    { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "S3Bucket", "Arn" ] }, "/*" ] ] }
                  ]
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "logs:*"
                    ],
                    "Resource": [
                        "arn:aws:logs:*:*:*"
                    ]
                }
              ]
            }
          }
        ]
      }
    },
    "TestLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "A Lambda function for PUTting random objects to an S3 Bucket)",
        "FunctionName": { "Fn::Join" : [ "", [ { "Ref": "StackPrefix" }, "-TestFunction" ] ] },
        "Handler": "index.handler",
        "MemorySize": "128",
        "Role": {"Fn::GetAtt":["TestLambdaRole","Arn"]},
        "Runtime": "python2.7",
        "Timeout": 300,
        "Code": {
          "ZipFile":{
            "Fn::Join":[ "",
            [  
              "import boto3\n",
              "import uuid\n",
              "import time\n",
              "import random\n",
              "def handler(event, context):\n",
              "  try:\n",
              "    s3 = boto3.resource('s3')\n",
              "    bucket = s3.Bucket('", { "Ref" : "S3Bucket" }, "')\n",
              "    start = time.time()\n",
              "    while True and time.time() - start < 298:\n",
              "      key = str(uuid.uuid1())\n",
              "      print(key)\n",
              "      bucket.put_object(Key=key)\n",
              "      time.sleep(abs(random.gauss(0.15, 0.05)))\n",
              "  except Exception as e:\n",
              "    print('Test function exception! {}'.format(e))\n",
              "    return False\n",
              "  return True\n"
            ]]
          }
        }
      }
    }
  },
  "Outputs": {

  }
}