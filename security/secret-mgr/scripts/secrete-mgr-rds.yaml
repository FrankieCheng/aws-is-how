Transform: AWS::SecretsManager-2020-07-23
Description: "This is an example template to demonstrate CloudFormation resourcefor Secrets Manager"
Parameters:
  EnableRotation: 
    AllowedValues: 
      - 'true'
      - 'false'
    Default: 'false'
    Description: "If true, rotation of password each 30 days"
    Type: String
  TestSecretArn: 
    Description: "Secret Arn or Cross Account Secret Arn"
    Type: String
  TestSubnet01:
    Description: Subnet id for RDS MySQL
    Type: String
  TestSubnet02:
    Description: Subnet id for RDS MySQL
    Type: String
  TestVpcId:
    Description: VPC id for RDS VPC endpoint
    Type: String
  TestEC2SecurityGroupId:
    Description: SecurityGroupId of EC2 to connect the RDS MySQL
    Type: String
Conditions:
  EnableRotationSchedule: !Equals
    - !Ref EnableRotation
    - 'true'
Resources:
  # SG for secreate manager VPC endpoint
  SecreteMgrVPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "SecreteMgrVPCEndpointSecurityGroup ${AWS::StackName}"
      GroupDescription: Allows access to the secreate manager VPC endpoint
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
      VpcId: !Ref TestVpcId
  # SG for RDS MySQL
  MySQLSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "MySQLSecurityGroup ${AWS::StackName}"
      GroupDescription: Allows access to the RDS MySQL
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        SourceSecurityGroupId: !Ref 'TestEC2SecurityGroupId'
      VpcId: !Ref TestVpcId
      Tags: 
        - Key: "GroupName"
          Value: !Sub "MySQLSecurityGroup ${AWS::StackName}"

  #VPC endpoint that will enable the rotation Lambda to make api calls to SecretManager 
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      SubnetIds:
        - !Ref TestSubnet01
        - !Ref TestSubnet02
      SecurityGroupIds:
        - !Ref SecreteMgrVPCEndpointSecurityGroup
      VpcEndpointType: 'Interface'
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      PrivateDnsEnabled: true
      VpcId:
        Ref: TestVpcId
  #This is an RDS instance resource. Its master username and password use dynamireferences to resolve values from 
  #SecretsManager. The dynamic reference guarantees that CloudFormation will not loor persist the resolved value 
  #We sub the Secret resource's logical id in order to construct the dynamireference, since the Secret's name is being #generated by CloudFormation
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: mysql
      DBSubnetGroupName:
        Ref: MyDBSubnetGroup
      MasterUsername: !Sub
        - "{{resolve:secretsmanager:"
        - !Ref TestSecretArn
        - "SecretString:username}}"
      MasterUserPassword: !Sub
        - "{{resolve:secretsmanager:"
        - !Ref TestSecretArn
        - "SecretString:password}}"      
      BackupRetentionPeriod: 0
      DBSecurityGroups:
        - Ref: MySQLSecurityGroup
  #Database subnet group for the RDS instance 
  MyDBSubnetGroup: 
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: "Test Group"
      SubnetIds: 
         - !Ref TestSubnet01
         - !Ref TestSubnet02
 
  #This is a RotationSchedule resource. It configures rotation of password for threferenced secret using a rotation lambda
  #The first rotation happens at resource creation time, with subsequent rotationscheduled according to the rotation rules
  #We explicitly depend on the SecretTargetAttachment resource being created tensure that the secret contains all the
  #information necessary for rotation to succeed
  MySecretRotationSchedule:
    Condition: EnableRotationSchedule
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SecretRDSInstanceAttachment 
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      HostedRotationLambda:
        RotationType: MySQLSingleUser
        RotationLambdaName: SecretsManagerRotation
        VpcSecurityGroupIds: !GetAtt TestVPC.DefaultSecurityGroup
        VpcSubnetIds:
          Fn::Join:
            - ","
            - - Ref: TestSubnet01
              - Ref: TestSubnet02
      RotationRules:
        AutomaticallyAfterDays: 30

Outputs: 
  dbEndPoint: 
    Value: 
      !GetAtt MyDBInstance.Endpoint.Address
  dbPort: 
    Value: 
      !GetAtt MyDBInstance.Endpoint.Port